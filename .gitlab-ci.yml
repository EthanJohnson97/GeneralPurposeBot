stages:
    - build
    - deploy
    - notification
variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    GIT_SUBMODULE_STRATEGY: recursive

build:
    stage: build
    image: docker:19.03.8
    services:
        - docker:19.03.8-dind
    before_script:
        - docker info
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    tags:
        - dind
    script:
        - docker pull $CI_REGISTRY_IMAGE:latest || true
        - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE:latest
deploy:
    stage: deploy
    image: git.nofla.me:5050/k8s-projects/dockerized-kubectl:latest
    only:
        - master
    environment:
        name: production
        kubernetes:
            namespace: desobot
    script:
        - kubectl version
        - sed -i "s~__CI_REGISTRY_IMAGE__~${CI_REGISTRY_IMAGE}~g" manifests/desobot.yml
        - sed -i "s/__VERSION__/${CI_COMMIT_SHA}/g" manifests/desobot.yml
        - kubectl apply -f manifests/desobot.yml
        - kubectl apply -f manifests/configmap.yml
        - kubectl apply -f manifests/mariadb.yml
        - kubectl rollout status deployment desobot

success_notification:
    stage: notification
    image: ubuntu:18.04
    only:
        - master
    script:
        - apt-get update
        - apt-get install -y git curl
        - chmod +x send-ci-notification.sh
        - ./send-ci-notification.sh success $WEBHOOK_URL
    when: on_success
failure_notification:
    stage: notification
    image: ubuntu:18.04
    only:
        - master
    script:
        - apt-get update
        - apt-get install -y git curl
        - chmod +x send-ci-notification.sh
        - ./send-ci-notification.sh failure $WEBHOOK_URL
    when: on_failure